import React, { useState, useEffect } from 'react';
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { MessageCircle } from "lucide-react"

const ExperimentInterface = () => {
  const [instructions, setInstructions] = useState("Your experiment instructions go here.");
  const [userResponse, setUserResponse] = useState("");
  const [aiResponses, setAiResponses] = useState([]);
  const [showAvatar, setShowAvatar] = useState(false);
  const [currentAiResponse, setCurrentAiResponse] = useState("");

  // Simulated AI responses (pre-scripted)
  const simulatedResponses = [
    "That's an interesting approach. Have you considered...",
    "Good start! You might want to think about...",
    "I see what you're getting at. Another perspective could be...",
  ];

  const handleUserResponseChange = (e) => {
    setUserResponse(e.target.value);
  };

  const handleAiAssistance = () => {
    const randomResponse = simulatedResponses[Math.floor(Math.random() * simulatedResponses.length)];
    setCurrentAiResponse(randomResponse);
    setAiResponses([...aiResponses, { user: userResponse, ai: randomResponse }]);
  };

  const toggleAvatarDisplay = () => {
    setShowAvatar(!showAvatar);
  };

  const saveData = () => {
    const experimentData = {
      userResponse,
      aiInteractions: aiResponses,
    };
    console.log("Saving data:", experimentData);
    // In a real scenario, you'd send this data to a server or local storage
    alert("Data saved successfully!");
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Experiment Interface</h1>
      
      <div className="mb-4">
        <h2 className="text-xl font-semibold mb-2">Instructions:</h2>
        <p>{instructions}</p>
      </div>

      <div className="flex gap-4">
        <div className="flex-1">
          <Textarea
            placeholder="Type your response here..."
            value={userResponse}
            onChange={handleUserResponseChange}
            className="w-full h-40"
          />
        </div>

        <div className="w-64 flex flex-col">
          <Button onClick={handleAiAssistance} className="mb-2">
            <MessageCircle className="mr-2 h-4 w-4" /> Ask AI Assistant
          </Button>
          
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="outline">View AI Response</Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>AI Assistant Response</AlertDialogTitle>
                <AlertDialogDescription>
                  {currentAiResponse || "No response yet. Try asking the AI Assistant!"}
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogAction>Close</AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>

          {showAvatar && (
            <div className="mt-4 p-2 border rounded">
              <img src="/api/placeholder/100/100" alt="AI Avatar" className="w-full mb-2" />
              <p className="text-sm">{currentAiResponse || "Hello! I'm your AI assistant."}</p>
            </div>
          )}
        </div>
      </div>

      <div className="mt-4 flex justify-between">
        <Button onClick={toggleAvatarDisplay}>
          {showAvatar ? "Hide Avatar" : "Show Avatar"}
        </Button>
        <Button onClick={saveData}>Save Data</Button>
      </div>
    </div>
  );
};

export default ExperimentInterface;
